#include "gtest/gtest.h"

#include "file.h"
#include "test/Person.h"
#include "test/TestFileClass.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>

namespace TC=ThorsAnvil::FileSystem::ColumnFormat;

class OpenTwoPeopleDirectoryFail: public OpenTwoPeopleTest
{
    protected:
        void SetUp() override
        {
            mkdir(lockedTestDir, 0'000);
        }
        void TearDown() override
        {
            chmod(lockedTestDir, 0'777);
            remove(lockedTestDir);
        }
};

class OpenTwoPeopleFileFail: public OpenTwoPeopleTest
{
    protected:
        void SetUp() override
        {
            int y = mkdir(lockedFileDir, 0'777);
            int x = mkdir(lockedFileP2Dir, 0'777);
            int fd = open(lockedFileP2Name, O_RDWR | O_CREAT, 0'000);
            close(fd);
        }
        void TearDown() override
        {
            chmod(lockedFileP2Name, 0'777);
            remove(lockedFileP2Name);

            chmod(lockedFileP2Dir, 0'777);
            remove(lockedFileP2Dir);

            chmod(lockedFileDir, 0'777);
            remove(lockedFileDir);
        }
};

TEST(OpenNoFile, ConstructFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::File<TwoPeople>    file;
}

TEST(OpenNoFile, ConstructOFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::OFile<TwoPeople>    file;
}

TEST(OpenNoFile, ConstructIFile)
{
    {
        // Need a file to exist to be able to read.
        TC::OFile<TwoPeople>    file;
    }

    // Just construct and destruct
    // Make sure it does not throw.
    TC::IFile<TwoPeople>    file;
}

TEST_F(OpenTwoPeopleTest, ConstructFileWithNameNoMode)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir);
    ASSERT_FALSE(file);
}

TEST_F(OpenTwoPeopleTest, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access(simpleTestP1Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestP2Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestDir,    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(OpenTwoPeopleTest, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(simpleTestDir);

    // All files should be accessible.
    ASSERT_EQ(access(simpleTestP1Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestP2Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestDir,    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(OpenTwoPeopleTest, ConstructIFileWithName)
{
    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_FALSE(file);
}

TEST_F(OpenTwoPeopleTest, ConstructIFileWithNameWithExistingFile)
{
    {
        // Make Sure file exists first.
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }

    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);
}

TEST_F(OpenTwoPeopleDirectoryFail, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedTestDir);

    // No files should exist
    ASSERT_EQ(access(lockedTestP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Dir,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir,    F_OK), 0);
}

TEST_F(OpenTwoPeopleDirectoryFail, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedTestDir);

    // No files should exist
    ASSERT_EQ(access(lockedTestP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Dir,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir,    F_OK), 0);
}

TEST_F(OpenTwoPeopleFileFail, ConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedFileDir);

    // No files should exist
    ASSERT_EQ(access(lockedFileP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP2Age,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access(lockedFileP2Name, F_OK), 0);
    ASSERT_EQ(access(lockedFileP2Dir,  F_OK), 0);
    ASSERT_EQ(access(lockedFileDir,    F_OK), 0);
}

TEST_F(OpenTwoPeopleFileFail, ConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedFileDir);

    // No files should exist
    ASSERT_EQ(access(lockedFileP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP2Age,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access(lockedFileP2Name, F_OK), 0);
    ASSERT_EQ(access(lockedFileP2Dir,  F_OK), 0);
    ASSERT_EQ(access(lockedFileDir,    F_OK), 0);
}

