#include "gtest/gtest.h"

#include "file.h"
#include "test/Person.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>

namespace TC=ThorsAnvil::FileSystem::ColumnFormat;

static char const   testDataDir[]       = "runTestDir";

static char const   simpleTestDir[]     = "runTestDir/PersonData";
static char const   simpleTestP1Dir[]   = "runTestDir/PersonData/personOne";
static char const   simpleTestP1Name[]  = "runTestDir/PersonData/personOne/name";
static char const   simpleTestP1Age[]   = "runTestDir/PersonData/personOne/age";
static char const   simpleTestP2Dir[]   = "runTestDir/PersonData/personTwo";
static char const   simpleTestP2Name[]  = "runTestDir/PersonData/personTwo/name";
static char const   simpleTestP2Age[]   = "runTestDir/PersonData/personTwo/age";

static char const   lockedTestDir[]     = "runTestDir/lockedDir";
static char const   lockedTestP1Dir[]   = "runTestDir/lockedDir/personOne";
static char const   lockedTestP1Name[]  = "runTestDir/lockedDir/personOne/name";
static char const   lockedTestP1Age[]   = "runTestDir/lockedDir/personOne/age";
static char const   lockedTestP2Dir[]   = "runTestDir/lockedDir/personTwo";
static char const   lockedTestP2Name[]  = "runTestDir/lockedDir/personTwo/name";
static char const   lockedTestP2Age[]   = "runTestDir/lockedDir/personTwo/age";

static char const   lockedFileDir[]     = "runTestDir/openDir";
static char const   lockedFileP1Dir[]   = "runTestDir/openDir/personOne";
static char const   lockedFileP1Name[]  = "runTestDir/openDir/personOne/name";
static char const   lockedFileP1Age[]   = "runTestDir/openDir/personOne/age";
static char const   lockedFileP2Dir[]   = "runTestDir/openDir/personTwo";
static char const   lockedFileP2Name[]  = "runTestDir/openDir/personTwo/name";
static char const   lockedFileP2Age[]   = "runTestDir/openDir/personTwo/age";

// The fixture for testing class Foo.
class TestDataDir: public ::testing::Test
{
    public:
        TestDataDir()
        {
            mkdir(testDataDir, 0'777);
        }
        ~TestDataDir()
        {
            remove(testDataDir);
        }
};

class OpenTwoPeopleTest: public TestDataDir
{
    protected:
        void TearDown() override
        {
            remove(simpleTestP1Name);
            remove(simpleTestP1Age);
            remove(simpleTestP1Dir);
            remove(simpleTestP2Name);
            remove(simpleTestP2Age);
            remove(simpleTestP2Dir);
            remove(simpleTestDir);
        }
};

class OpenTwoPeopleDirectoryFail: public TestDataDir
{
    protected:
        void SetUp() override
        {
            mkdir(lockedTestDir, 0'000);
        }
        void TearDown() override
        {
            remove(lockedTestP1Name);
            remove(lockedTestP1Age);
            remove(lockedTestP1Dir);
            remove(lockedTestP2Name);
            remove(lockedTestP2Age);
            remove(lockedTestP2Dir);
            remove(lockedTestDir);
        }
};

class OpenTwoPeopleFileFail: public TestDataDir
{
    protected:
        void SetUp() override
        {
            int y = mkdir(lockedFileDir, 0'777);
            int x = mkdir(lockedFileP2Dir, 0'777);
            int fd = open(lockedFileP2Name, O_RDWR | O_CREAT, 0'000);
            close(fd);
        }
        void TearDown() override
        {
            remove(lockedFileP1Name);
            remove(lockedFileP1Age);
            remove(lockedFileP1Dir);
            remove(lockedFileP2Name);
            remove(lockedFileP2Age);
            remove(lockedFileP2Dir);
            remove(lockedFileDir);
        }
};


TEST(OpenNoFile, Constructor)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::File<TwoPeople>    file;
}

TEST_F(OpenTwoPeopleTest, ConstructorWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir);

    // All files should be accessible.
    ASSERT_EQ(access(simpleTestP1Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP1Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestP2Name, R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Age,  R_OK | W_OK), 0);
    ASSERT_EQ(access(simpleTestP2Dir,  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access(simpleTestDir,    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(OpenTwoPeopleDirectoryFail, ConstructorWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedTestDir);

    // No files should exist
    ASSERT_EQ(access(lockedTestP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Name, F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Age,  F_OK), -1);
    ASSERT_EQ(access(lockedTestP2Dir,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir,    F_OK), 0);
}

TEST_F(OpenTwoPeopleFileFail, ConstructorWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedFileDir);

    // No files should exist
    ASSERT_EQ(access(lockedFileP1Name, F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Age,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP1Dir,  F_OK), -1);
    ASSERT_EQ(access(lockedFileP2Age,  F_OK), -1);
    ASSERT_FALSE(file);

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access(lockedFileP2Name, F_OK), 0);
    ASSERT_EQ(access(lockedFileP2Dir,  F_OK), 0);
    ASSERT_EQ(access(lockedFileDir,    F_OK), 0);
}

