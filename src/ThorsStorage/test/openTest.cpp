#include "gtest/gtest.h"

#include "file.h"
#include "test/Person.h"
#include "test/TestFileClass.h"


#ifdef __WINNT
#define     IS_NOT_ROOT()           true
#else
#define     IS_NOT_ROOT()           (getuid() != 0)
#endif

namespace TC=ThorsAnvil::FileSystem::ColumnFormat;
using OpenTwoPeopleDirectoryFail = LockedTestDir;
using OpenTwoPeopleFileFail      = LockedFileDir;
using OpenNoFile                 = TestFileClass;


TEST(openTest, OpenNoFileConstructFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::File<TwoPeople>    file;
}

TEST(openTest, OpenNoFileConstructOFile)
{
    // Just construct and destruct
    // Make sure it does not throw.
    TC::OFile<TwoPeople>    file;
}

TEST(openTest, OpenNoFileConstructIFile)
{
    {
        // Need a file to exist to be able to read.
        TC::OFile<TwoPeople>    file;
    }

    // Just construct and destruct
    // Make sure it does not throw.
    TC::IFile<TwoPeople>    file;
}

TEST_F(openTest, SimpleTestDirConstructFileWithNameNoMode)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(openTest, SimpleTestDirConstructFileCallOpenWithNameNoMode)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir);
    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(openTest, SimpleTestDirConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(openTest, SimpleTestDirConstructWithNameOpenFile)
{
    TC::File<TwoPeople>    file(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str(), std::ios::out);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirConstructWithNameOpenOFile)
{
    TC::OFile<TwoPeople>   file(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirConstructWithNameOpenIFile)
{
    {
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirOpenWithNameOpenFile)
{
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str(), std::ios::out);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirOpenWithNameOpenOFile)
{
    TC::OFile<TwoPeople>   file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirOpenWithNameOpenIFile)
{
    {
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    file.open(testSecondOpenDir.c_str());

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        ASSERT_NE(access(testSecondOpenDir.c_str(), F_OK), 0);
    }
}

TEST_F(openTest, SimpleTestDirConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(simpleTestDir, std::ios::out);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(openTest, SimpleTestDirConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(openTest, SimpleTestDirConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);

    // All files should be accessible.
    ASSERT_EQ(access((simpleTestDir + simpleP1Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP1Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Name).c_str(), R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Age).c_str(),  R_OK | W_OK), 0);
    ASSERT_EQ(access((simpleTestDir + simpleP2Dir).c_str(),  R_OK | W_OK | X_OK), 0);
    ASSERT_EQ(access((simpleTestDir            ).c_str(),    R_OK | W_OK | X_OK), 0);
    ASSERT_TRUE(file);
}

TEST_F(openTest, SimpleTestDirConstructIFileWithName)
{
    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(openTest, SimpleTestDirConstructIFileCallOpenWithName)
{
    // Just construct and destruct
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);
    }
}

TEST_F(openTest, SimpleTestDirConstructIFileWithNameWithExistingFile)
{
    {
        // Make Sure file exists first.
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }

    // Just construct and destruct
    TC::IFile<TwoPeople>    file(simpleTestDir);
    ASSERT_TRUE(file);
}

TEST_F(openTest, SimpleTestDirConstructIFileCallOpenWithNameWithExistingFile)
{
    {
        // Make Sure file exists first.
        TC::OFile<TwoPeople>    file(simpleTestDir);
    }

    // Just construct and destruct
    TC::IFile<TwoPeople>    file;

    file.open(simpleTestDir);
    ASSERT_TRUE(file);
}

#ifndef __WINNT
TEST_F(openTest, LockedTestDirConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}
#endif

#ifndef __WINNT
TEST_F(openTest, LockedTestDirConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(lockedTestDir);


    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}
#endif

#ifndef __WINNT
TEST_F(openTest, LockedTestDirConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}
#endif

#ifndef __WINNT
TEST_F(openTest, LockedTestDirConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(lockedTestDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedTestDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedTestDir + simpleP2Dir).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: OpenTwoPeopleDirectoryFail::SetUP added -> lockedTestDir
    ASSERT_EQ(access(lockedTestDir.c_str(),    F_OK), 0);
}
#endif

TEST_F(openTest, LockedFileDirConstructFileWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file(lockedFileDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(openTest, LockedFileDirConstructFileCallOpenWithName)
{
    // Just construct and destruct
    TC::File<TwoPeople>    file;

    file.open(lockedFileDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(openTest, LockedFileDirConstructOFileWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file(lockedFileDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

TEST_F(openTest, OpenTwoPeopleFileFailConstructOFileCallOpenWithName)
{
    // Just construct and destruct
    TC::OFile<TwoPeople>    file;

    file.open(lockedFileDir);

    if (IS_NOT_ROOT()) {
        // Tests will fail if we are root.
        // So don't bother running them

        ASSERT_FALSE(file);

        // No files should exist
        ASSERT_EQ(access((lockedFileDir + simpleP1Name).c_str(), F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Age).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP1Dir).c_str(),  F_OK), -1);
        ASSERT_EQ(access((lockedFileDir + simpleP2Age).c_str(),  F_OK), -1);
        ASSERT_FALSE(file);
    }

    // Note: Following directories added by OpenTwoPeopleFileFail::SetUp()
    ASSERT_EQ(access((lockedFileDir + simpleP2Name).c_str(), F_OK), 0);
    ASSERT_EQ(access((lockedFileDir + simpleP2Dir).c_str(),  F_OK), 0);
    ASSERT_EQ(access((lockedFileDir            ).c_str(),    F_OK), 0);
}

