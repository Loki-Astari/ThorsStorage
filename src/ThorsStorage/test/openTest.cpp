#include "gtest/gtest.h"

#include "file.h"
#include "test/Person.h"
#include <stdio.h>
#include <unistd.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>

namespace TC=ThorsAnvil::FileSystem::ColumnFormat;

static char const   testDataDir[]       = "runTestDir";

static char const   simpleTestDir[]     = "runTestDir/PersonData";
static char const   simpleTestName[]    = "runTestDir/PersonData/name";
static char const   simpleTestAge[]     = "runTestDir/PersonData/age";

static char const   lockedTestDir[]     = "runTestDir/lockedDir";
static char const   lockedTestName[]    = "runTestDir/lockedDir/name";
static char const   lockedTestAge[]     = "runTestDir/lockedDir/age";

static char const   lockedFileDir[]     = "runTestDir/openDir";
static char const   lockedFileName[]    = "runTestDir/openDir/name";
static char const   lockedFileAge[]     = "runTestDir/openDir/age";

// The fixture for testing class Foo.
class TestDataDir: public ::testing::Test
{
    public:
        TestDataDir()
        {
            mkdir(testDataDir, 0'777);
        }
        ~TestDataDir()
        {
            remove(testDataDir);
        }
};

class OpenPersonTest: public TestDataDir
{
    protected:
        void TearDown() override
        {
            remove(simpleTestName);
            remove(simpleTestAge);
            remove(simpleTestDir);
        }
};

class OpenPersonDirectoryFail: public TestDataDir
{
    protected:
        void SetUp() override
        {
            mkdir(lockedTestDir, 0'000);
        }
        void TearDown() override
        {
            remove(lockedTestName);
            remove(lockedTestAge);
            remove(lockedTestDir);
        }
};

class OpenPersonFileFail: public TestDataDir
{
    protected:
        void SetUp() override
        {
            mkdir(lockedFileDir, 0'777);
            int fd = open(lockedFileName, O_RDWR | O_CREAT, 0'000);
            close(fd);
        }
        void TearDown() override
        {
            remove(lockedFileName);
            remove(lockedFileAge);
            remove(lockedFileDir);
        }
};


TEST(OpenNoFile, Constructor)
{
    // Just construct and destruct
    TC::File<Person>    file;
}

TEST_F(OpenPersonTest, ConstructorWithName)
{
    // Just construct and destruct
    TC::File<Person>    file(simpleTestDir);

    ASSERT_NE(access(simpleTestName, R_OK | W_OK), -1);
    ASSERT_NE(access(simpleTestAge,  R_OK | W_OK), -1);
    ASSERT_NE(access(simpleTestDir,  R_OK | W_OK | X_OK), -1);
    ASSERT_TRUE(file);
}

TEST_F(OpenPersonDirectoryFail, ConstructorWithName)
{
    TC::File<Person>    file(lockedTestDir);
    ASSERT_FALSE(file);
}

TEST_F(OpenPersonFileFail, ConstructorWithName)
{
    TC::File<Person>    file(lockedFileDir);
    ASSERT_EQ(access(lockedFileName, R_OK | W_OK), -1);
    ASSERT_NE(access(lockedFileDir,  R_OK | W_OK | X_OK), -1);
    ASSERT_FALSE(file);
}

